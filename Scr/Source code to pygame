import pygame
import os

# Initialize Pygame
pygame.init()

# Set up the screen
screen_width = 1000
screen_height = 800
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Boxing Game")

# Define Boxer class
class Boxer:
    def __init__(self, name, image_paths, x, y, keys):
        self.name = name
        self.image_normal = pygame.image.load(image_paths[0])
        self.image_punch = pygame.image.load(image_paths[1])
        self.image_normal_mirror = pygame.transform.flip(self.image_normal, True, False)
        self.image_punch_mirror = pygame.transform.flip(self.image_punch, True, False)
        self.rect = self.image_normal.get_rect(center=(x, y))
        self.health = 100
        self.speed = 7
        self.punch_damage = 10
        self.is_punching = False
        self.cooldown = 0
        self.keys = keys

    def punch(self, opponent):
        if self.rect.colliderect(opponent.rect) and self.cooldown == 0:
            opponent.health -= self.punch_damage
            self.cooldown = 30  # Cooldown of 30 frames (1 second at 30 FPS)

    def move(self, dx, dy):
        self.rect.x += dx
        self.rect.y += dy

    def draw(self):
        if self.rect.x < self.opponent.rect.x:
            screen.blit(self.image_punch if self.is_punching else self.image_normal, self.rect)
        else:
            screen.blit(self.image_punch_mirror if self.is_punching else self.image_normal_mirror, self.rect)

# Define ForceField class
class ForceField:
    def __init__(self):
        self.width = 10
        self.height = screen_height
        self.color = (0, 255, 0)
        self.surface = pygame.Surface((self.width, self.height))
        self.surface.fill(self.color)
        self.rect = self.surface.get_rect(centerx=screen_width // 2)

    def draw(self):
        screen.blit(self.surface, self.rect)

# Create boxers
current_path = os.path.dirname(__file__)
boxer1_images = [os.path.join(current_path, "/Users/9721999/Downloads/boxer2(1).png"), os.path.join(current_path, "/Users/9721999/Downloads/boxer1(2).png")]
boxer2_images = [os.path.join(current_path, "/Users/9721999/Downloads/New Piskel (2).png"), os.path.join(current_path, "/Users/9721999/Downloads/boxer2(2).png")]

# Define keys for each player
player1_keys = {
    "up": pygame.K_w,
    "left": pygame.K_a,
    "right": pygame.K_d,
    "down": pygame.K_s,
    "punch": pygame.K_SPACE
}

player2_keys = {
    "up": pygame.K_UP,
    "left": pygame.K_LEFT,
    "right": pygame.K_RIGHT,
    "down": pygame.K_DOWN,
    "punch": pygame.K_RETURN
}

# Create boxers
boxer1 = Boxer("Player 1", boxer1_images, 200, screen_height // 2, player1_keys)
boxer2 = Boxer("Player 2", boxer2_images, screen_width - 250, screen_height // 2, player2_keys)

# Create force field
force_field = ForceField()

# Main game loop
running = True
clock = pygame.time.Clock()
while running:
    screen.fill((255, 255, 255))

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Player controls
    for boxer in (boxer1, boxer2):
        keys = pygame.key.get_pressed()
        dx = (keys[boxer.keys["right"]] - keys[boxer.keys["left"]]) * boxer.speed
        dy = (keys[boxer.keys["down"]] - keys[boxer.keys["up"]]) * boxer.speed
        if dx or dy:
            boxer.move(dx, dy)
        if keys[boxer.keys["punch"]]:
            boxer.is_punching = True
        else:
            boxer.is_punching = False

    # Check for punching
    boxer1.punch(boxer2)
    boxer2.punch(boxer1)

    # Update cooldown for punching
    for boxer in (boxer1, boxer2):
        if boxer.cooldown > 0:
            boxer.cooldown -= 1

    # Update force field position based on players' positions
    force_field.rect.centerx = (boxer1.rect.right + boxer2.rect.left) // 2

    # Draw force field
    force_field.draw()

    # Draw boxers
    for boxer in (boxer1, boxer2):
        boxer.draw()

    pygame.display.flip()
    clock.tick(30)

# Quit Pygame
pygame.quit()
